# .github/workflows/ci-room-create-service.yml
name: CI/CD - Room Create Service

on:
  push:
    branches: [ qa ]
    paths:
      - 'microservices/room-management/room-create-service/**'
      - '.github/workflows/ci-room-create-service.yml'
  pull_request:
    branches: [ qa ]
    paths:
      - 'microservices/room-management/room-create-service/**'

env:
  DOCKER_IMAGE: hoteleco/room-create-service
  DOCKER_TAG: ${{ github.sha }}
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_rooms_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: microservices/room-management/room-create-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort

    - name: Run code formatting check (Black)
      working-directory: microservices/room-management/room-create-service
      run: |
        black --check --diff .

    - name: Run import sorting check (isort)
      working-directory: microservices/room-management/room-create-service
      run: |
        isort --check-only --diff .

    - name: Run linting (flake8)
      working-directory: microservices/room-management/room-create-service
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run static analysis (mypy)
      working-directory: microservices/room-management/room-create-service
      run: |
        pip install mypy
        mypy . --ignore-missing-imports --no-strict-optional

    - name: Set up test environment
      working-directory: microservices/room-management/room-create-service
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_rooms_db
        JWT_SECRET_KEY: test_secret_key_for_github_actions
      run: |
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> $GITHUB_ENV

    - name: Run unit tests
      working-directory: microservices/room-management/room-create-service
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_rooms_db
        JWT_SECRET_KEY: test_secret_key_for_github_actions
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./microservices/room-management/room-create-service/coverage.xml
        flags: room-create-service
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run integration tests
      working-directory: microservices/room-management/room-create-service
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_rooms_db
        JWT_SECRET_KEY: test_secret_key_for_github_actions
      run: |
        python -m pytest tests/integration/ -v --maxfail=1

    - name: Security scan with bandit
      working-directory: microservices/room-management/room-create-service
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload test results
      uses: actions/upload-artifact@v4  # Actualizado a v4
      if: always()
      with:
        name: test-results
        path: |
          microservices/room-management/room-create-service/htmlcov/
          microservices/room-management/room-create-service/coverage.xml
          microservices/room-management/room-create-service/bandit-report.json

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value